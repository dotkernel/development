{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"../../README.md","title":"Home"},{"location":"#readmemd","text":"","title":"../../README.md"},{"location":"v1/faq/","text":"Frequently asked questions How do I switch to a different version of PHP? Execute the following command: sudo dnf module switch-to php:remi-{major}.{minor} -y where {major}.{minor} is one of the supported PHP versions: 8.4 , 8.3 , 8.2 and 8.1 . Additionally, our setup includes predefined aliases for executing the above command. The aliases are the following: php81 : switch to PHP 8.1 php82 : switch to PHP 8.2 php83 : switch to PHP 8.3 php83 : switch to PHP 8.4 After switching to a different PHP version, test with the following command: php -v Depending on the selected PHP version, the output should look similar to the below: PHP 8.3.8 (cli) (built: Jun 4 2024 14:53:17) (NTS gcc x86_64) Copyright (c) The PHP Group Zend Engine v4.3.8, Copyright (c) Zend Technologies How do I switch to a different version of Node.js? Execute the following commands: sudo dnf remove nodejs -y curl -fsSL https://rpm.nodesource.com/setup_{major}.x | sudo bash - sudo dnf install nodejs -y where {major} is the Node.js version you want to switch to. Additionally, our setup includes predefined aliases for the above commands. The aliases are the following: node22 : switch to Node.js 22 node20 : switch to Node.js 20 node18 : switch to Node.js 18 After switching to a different Node.js version, test with the following command: node -v How do I fix common permission issues? If running your project, you encounter permission issues, follow the below steps. Error PHP Fatal error: Uncaught InvalidArgumentException: The directory \" &lt;path-to-project&gt; /data\" is not writable... PHP Fatal error: Uncaught InvalidArgumentException: The directory \" &lt;path-to-project&gt; /data/cache\" is not writable... PHP Fatal error: Uncaught InvalidArgumentException: The directory \" &lt;path-to-project&gt; /data/cache/doctrine\" is not writable... Solution chmod -R 777 data Error PHP Fatal error: Uncaught InvalidArgumentException: The directory \" &lt;path-to-project&gt; /public/uploads\" is not writable... Solution chmod -R 777 public/uploads Error PHP Fatal error: Uncaught ErrorException: fopen( &lt;path-to-project&gt; /log/error-log-yyyy-mm-dd.log): Failed to open stream: Permission denied... Solution chmod -R 777 log Where are the error log files? From time to time, you are encountering various errors which are not displayed. Or you can get errors 500 in a browser. To find the error messages, you need to read the error log files. Apache log files /var/log/httpd/error_log PHP-FPM log files /var/log/php-fpm/error.log /var/log/php-fpm/www-error.log How do I update Composer? Before updating, check your current Composer version by executing: composer --version The output should be similar to: Composer version 2.8.5 2025-01-21 15:23:40 PHP version 8.3.20 (/usr/bin/php) Run the \"diagnose\" command to get more detailed diagnostics output. Update Composer using its own self-update command: sudo /usr/local/bin/composer self-update The output should be similar to: Upgrading to version 2.8.8 (stable channel). Use composer self-update --rollback to return to version 2.8.5 After updating, check again your Composer version by executing: composer --version The output should be similar to: Composer version 2.8.8 2025-04-04 16:56:46 PHP version 8.3.20 (/usr/bin/php) Run the \"diagnose\" command to get more detailed diagnostics output. How do I update phpMyAdmin? Being installed as a system package, it can be updated using the command which updates the rest of the system packages: sudo dnf upgrade -y How do I create command aliases? From either your terminal or file explorer, navigate to your home directory ( /home/&lt;your-username&gt;/ ). Using your preferred text editor, open the file: .bash_profile (if it does not exist, creat it first). Move to the end of the file and enter on a new line: alias command_alias=\"command to execute\" where: command_alias is the name by which you want to call your original command command to execute : the original command to be executed on alias call Example alias list_files=\"ls -Al\" will create an alias called list_files that will run the command ls -Al . Then, you can execute your custom alias in a terminal just as a regular command: list_files","title":"FAQ"},{"location":"v1/faq/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"v1/faq/#how-do-i-switch-to-a-different-version-of-php","text":"Execute the following command: sudo dnf module switch-to php:remi-{major}.{minor} -y where {major}.{minor} is one of the supported PHP versions: 8.4 , 8.3 , 8.2 and 8.1 . Additionally, our setup includes predefined aliases for executing the above command. The aliases are the following: php81 : switch to PHP 8.1 php82 : switch to PHP 8.2 php83 : switch to PHP 8.3 php83 : switch to PHP 8.4 After switching to a different PHP version, test with the following command: php -v Depending on the selected PHP version, the output should look similar to the below: PHP 8.3.8 (cli) (built: Jun 4 2024 14:53:17) (NTS gcc x86_64) Copyright (c) The PHP Group Zend Engine v4.3.8, Copyright (c) Zend Technologies","title":"How do I switch to a different version of PHP?"},{"location":"v1/faq/#how-do-i-switch-to-a-different-version-of-nodejs","text":"Execute the following commands: sudo dnf remove nodejs -y curl -fsSL https://rpm.nodesource.com/setup_{major}.x | sudo bash - sudo dnf install nodejs -y where {major} is the Node.js version you want to switch to. Additionally, our setup includes predefined aliases for the above commands. The aliases are the following: node22 : switch to Node.js 22 node20 : switch to Node.js 20 node18 : switch to Node.js 18 After switching to a different Node.js version, test with the following command: node -v","title":"How do I switch to a different version of Node.js?"},{"location":"v1/faq/#how-do-i-fix-common-permission-issues","text":"If running your project, you encounter permission issues, follow the below steps.","title":"How do I fix common permission issues?"},{"location":"v1/faq/#where-are-the-error-log-files","text":"From time to time, you are encountering various errors which are not displayed. Or you can get errors 500 in a browser. To find the error messages, you need to read the error log files.","title":"Where are the error log files?"},{"location":"v1/faq/#how-do-i-update-composer","text":"Before updating, check your current Composer version by executing: composer --version The output should be similar to: Composer version 2.8.5 2025-01-21 15:23:40 PHP version 8.3.20 (/usr/bin/php) Run the \"diagnose\" command to get more detailed diagnostics output. Update Composer using its own self-update command: sudo /usr/local/bin/composer self-update The output should be similar to: Upgrading to version 2.8.8 (stable channel). Use composer self-update --rollback to return to version 2.8.5 After updating, check again your Composer version by executing: composer --version The output should be similar to: Composer version 2.8.8 2025-04-04 16:56:46 PHP version 8.3.20 (/usr/bin/php) Run the \"diagnose\" command to get more detailed diagnostics output.","title":"How do I update Composer?"},{"location":"v1/faq/#how-do-i-update-phpmyadmin","text":"Being installed as a system package, it can be updated using the command which updates the rest of the system packages: sudo dnf upgrade -y","title":"How do I update phpMyAdmin?"},{"location":"v1/faq/#how-do-i-create-command-aliases","text":"From either your terminal or file explorer, navigate to your home directory ( /home/&lt;your-username&gt;/ ). Using your preferred text editor, open the file: .bash_profile (if it does not exist, creat it first). Move to the end of the file and enter on a new line: alias command_alias=\"command to execute\" where: command_alias is the name by which you want to call your original command command to execute : the original command to be executed on alias call","title":"How do I create command aliases?"},{"location":"v1/introduction/","text":"Introduction dotkernel/development is a tool that helps you prepare your development environment with the following components: WSL2 - Windows Subsystem for Linux AlmaLinux9 - free and open source Linux distribution PHP - general-purpose scripting language geared towards web development Apache - free and open-source cross-platform web server software MariaDB - community-developed, commercially supported fork of the MySQL relational database management system Git - distributed version control system Composer - application-level dependency manager for the PHP Node.js - JavaScript runtime environment PhpMyAdmin - open source administration tool for MySQL and MariaDB","title":"Introduction"},{"location":"v1/introduction/#introduction","text":"dotkernel/development is a tool that helps you prepare your development environment with the following components: WSL2 - Windows Subsystem for Linux AlmaLinux9 - free and open source Linux distribution PHP - general-purpose scripting language geared towards web development Apache - free and open-source cross-platform web server software MariaDB - community-developed, commercially supported fork of the MySQL relational database management system Git - distributed version control system Composer - application-level dependency manager for the PHP Node.js - JavaScript runtime environment PhpMyAdmin - open source administration tool for MySQL and MariaDB","title":"Introduction"},{"location":"v1/setup/installation/","text":"Installation Install AlmaLinux 9 Open Microsoft Store, in the search box type in: AlmaLinux and hit Enter . From the results, select AlmaLinux 9 - this will take you to AlmaLinux 9 's app page. On this page, locate and click the Install button - this will download AlmaLinux 9 WSL image on your system. Once the download has finished, the Install button is replaced by an Open button - clicking it will open Windows Terminal . Here you will be asked to fill in your username (for example dotkernel ): Installing, this may take a few minutes... Please create a default UNIX user account. The username does not need to match your Windows username. For more information visit: https://aka.ms/wslusers Enter new UNIX username: Next, you are prompted to enter a password to use with your username (you will not see what you are typing, that's a security measure in Linux regarding passwords): Enter new UNIX username: dotkernel. Changing password for user dotkernel. New password: Depending on the strength of your password, you might see one of the following messages (if you want to choose a different password, hit Enter and you are taken back to previous step - else, continue with retyping your password). BAD PASSWORD: The password fails the dictionary check - it is based on a dictionary word BAD PASSWORD: The password is a palindrome Next, you are asked to retype your password: Retype new password: Finally, you should see the following message: passwd: all authentication tokens updated successfully. Installation successful! [dotkernel@hostname:~]$","title":"Installation"},{"location":"v1/setup/installation/#installation","text":"","title":"Installation"},{"location":"v1/setup/installation/#install-almalinux-9","text":"Open Microsoft Store, in the search box type in: AlmaLinux and hit Enter . From the results, select AlmaLinux 9 - this will take you to AlmaLinux 9 's app page. On this page, locate and click the Install button - this will download AlmaLinux 9 WSL image on your system. Once the download has finished, the Install button is replaced by an Open button - clicking it will open Windows Terminal . Here you will be asked to fill in your username (for example dotkernel ): Installing, this may take a few minutes... Please create a default UNIX user account. The username does not need to match your Windows username. For more information visit: https://aka.ms/wslusers Enter new UNIX username: Next, you are prompted to enter a password to use with your username (you will not see what you are typing, that's a security measure in Linux regarding passwords): Enter new UNIX username: dotkernel. Changing password for user dotkernel. New password: Depending on the strength of your password, you might see one of the following messages (if you want to choose a different password, hit Enter and you are taken back to previous step - else, continue with retyping your password). BAD PASSWORD: The password fails the dictionary check - it is based on a dictionary word BAD PASSWORD: The password is a palindrome Next, you are asked to retype your password: Retype new password: Finally, you should see the following message: passwd: all authentication tokens updated successfully. Installation successful! [dotkernel@hostname:~]$","title":"Install AlmaLinux 9"},{"location":"v1/setup/setup-packages/","text":"Setup the packages in AlmaLinux 9 Install requirements: sudo dnf install epel-release dnf-utils https://rpms.remirepo.net/enterprise/remi-release-9.rpm -y Update/Upgrade system packages: sudo dnf upgrade -y Now, install the latest version of Ansible : sudo dnf install ansible -y Clone dotkernel/development into your home directory: git clone https://github.com/dotkernel/development.git Move inside the directory development/wsl : cd ~/development/wsl/ Using your preferred text editor, open config.yml where you must fill in the empty fields. Save and close the file. Install requirements and initialize systemd by running the below Ansible command: ansible-playbook -i hosts install.yml --ask-become-pass The installation process will ask for your password (set during the installation process) and will iterate over each task in the playbook and will output a short summary with the results. At this step, AlmaLinux 9 needs to be restarted - quit it by pressing Control + d . Open Windows Terminal . Stop AlmaLinux 9 : wsl -t AlmaLinux9 Start AlmaLinux 9 : wsl -d AlmaLinux9 Move inside the directory development/wsl : cd ~/development/wsl/ Continue installation by running the below Ansible command: ansible-playbook -i hosts install.yml --ask-become-pass The installation process will ask for your password (set during the installation process) and will iterate over each task in the playbook and will output a short summary with the results. Now check if everything works by opening in your browser: http://localhost/ - Apache's default home page http://localhost/info.php - PHP info page http://localhost/phpmyadmin/ - PhpMyAdmin (login with root + the root password you configured in config.yml under mariadb -&gt; root_password ) The installation is complete, your AlmaLinux 9 development environment is ready to use. Running AlmaLinux 9 Open Windows Terminal . Start AlmaLinux 9 : wsl -d AlmaLinux9 Note In order to run your applications using WSL2, you always need to be connected to your AlmaLinux9 distribution. For this, all you need to do is to keep open an instance of Windows Terminal that is connected to it.","title":"Setup Packages"},{"location":"v1/setup/setup-packages/#setup-the-packages-in-almalinux-9","text":"Install requirements: sudo dnf install epel-release dnf-utils https://rpms.remirepo.net/enterprise/remi-release-9.rpm -y Update/Upgrade system packages: sudo dnf upgrade -y Now, install the latest version of Ansible : sudo dnf install ansible -y Clone dotkernel/development into your home directory: git clone https://github.com/dotkernel/development.git Move inside the directory development/wsl : cd ~/development/wsl/ Using your preferred text editor, open config.yml where you must fill in the empty fields. Save and close the file. Install requirements and initialize systemd by running the below Ansible command: ansible-playbook -i hosts install.yml --ask-become-pass The installation process will ask for your password (set during the installation process) and will iterate over each task in the playbook and will output a short summary with the results. At this step, AlmaLinux 9 needs to be restarted - quit it by pressing Control + d . Open Windows Terminal . Stop AlmaLinux 9 : wsl -t AlmaLinux9 Start AlmaLinux 9 : wsl -d AlmaLinux9 Move inside the directory development/wsl : cd ~/development/wsl/ Continue installation by running the below Ansible command: ansible-playbook -i hosts install.yml --ask-become-pass The installation process will ask for your password (set during the installation process) and will iterate over each task in the playbook and will output a short summary with the results. Now check if everything works by opening in your browser: http://localhost/ - Apache's default home page http://localhost/info.php - PHP info page http://localhost/phpmyadmin/ - PhpMyAdmin (login with root + the root password you configured in config.yml under mariadb -&gt; root_password ) The installation is complete, your AlmaLinux 9 development environment is ready to use.","title":"Setup the packages in AlmaLinux 9"},{"location":"v1/setup/setup-packages/#running-almalinux-9","text":"Open Windows Terminal . Start AlmaLinux 9 : wsl -d AlmaLinux9","title":"Running AlmaLinux 9"},{"location":"v1/setup/system-requirements/","text":"System Requirements First, you need to check if your system is ready for using WSL2 . Open Windows Terminal and execute the following command: wsl -v The output should look similar to this: WSL version: 2.2.4.0 Kernel version: 5.15.153.1-2 WSLg version: 1.0.61 MSRDC version: 1.2.5326 Direct3D version: 1.611.1-81528511 DXCore version: 10.0.26091.1-240325-1447.ge-release Windows version: 10.0.22631.3737 If the output starts with WSL version: 2.x , you are ready to use WSL2 and can continue with the installation . Else, you need to install WSL2 and it's components as shown below. Before proceeding with the installation, please consult Microsoft's documentation regarding the minimum requirements for running WSL2 . Once you know that your system can run WSL2 , open the Run prompt by pressing Win + r and type in the dialog OptionalFeatures , then press Enter . This will open a window where you can turn Windows features on/off. Make sure the next features are activated (checked): Hyper-V (including its sub-features) Virtual Machine Platform Windows Subsystem for Linux If any of the above features is missing, then first you need to install them manually using this guide and then continue with the below steps. Click Ok and restart your computer. Open Microsoft Store, search for Windows Subsystem for Linux and install it. Make sure WSL2 is set as default by executing the below command in Windows Terminal : wsl --set-default-version 2 To test, run again the following command: wsl -v This time the output should display WSL version: 2.x , which means that your system is ready for using WSL2 and you can continue with the installation .","title":"System Requirements"},{"location":"v1/setup/system-requirements/#system-requirements","text":"First, you need to check if your system is ready for using WSL2 . Open Windows Terminal and execute the following command: wsl -v The output should look similar to this: WSL version: 2.2.4.0 Kernel version: 5.15.153.1-2 WSLg version: 1.0.61 MSRDC version: 1.2.5326 Direct3D version: 1.611.1-81528511 DXCore version: 10.0.26091.1-240325-1447.ge-release Windows version: 10.0.22631.3737 If the output starts with WSL version: 2.x , you are ready to use WSL2 and can continue with the installation . Else, you need to install WSL2 and it's components as shown below. Before proceeding with the installation, please consult Microsoft's documentation regarding the minimum requirements for running WSL2 . Once you know that your system can run WSL2 , open the Run prompt by pressing Win + r and type in the dialog OptionalFeatures , then press Enter . This will open a window where you can turn Windows features on/off. Make sure the next features are activated (checked): Hyper-V (including its sub-features) Virtual Machine Platform Windows Subsystem for Linux If any of the above features is missing, then first you need to install them manually using this guide and then continue with the below steps. Click Ok and restart your computer. Open Microsoft Store, search for Windows Subsystem for Linux and install it. Make sure WSL2 is set as default by executing the below command in Windows Terminal : wsl --set-default-version 2 To test, run again the following command: wsl -v This time the output should display WSL version: 2.x , which means that your system is ready for using WSL2 and you can continue with the installation .","title":"System Requirements"},{"location":"v1/virtualhosts/create-virtualhost/","text":"Create virtualhosts Move inside the directory development/wsl : cd ~/development/wsl/ Using your preferred text editor, open config.yml and, under the virtualhosts key, enter the virtualhosts that you want to create, each on its own line. Already existing virtualhosts will be skipped, their contents will not be lost, no need to comment or remove them. Save and close the file. Create the specified virtualhosts: ansible-playbook -i hosts create-virtualhost.yml --ask-become-pass This process will ask for your password (set during the installation process) and then iterate over the list of configured virtualhosts and will output a short summary with the results. Your virtualhost should be accessible and ready to use. You will install your project under the html directory of your project, for example: /var/www/example.localhost/html . The virtualhost's document root is set to the public directory of the above location, for example /var/www/example.localhost/html/public . If you want to have the DocumentRoot directly in html folder, you need to modify the file /etc/httpd/sites-available/example.localhost . Good to know In order to run your installed projects, you need to start AlmaLinux 9 first. If you work with virtualhosts, your projects are created under /var/www/ . You can still run PHP scripts under the default Apache project directory, located at /var/www/html/ . If you encounter write permission issues, see this guide . This tool installs PHP 8.3 by default. If you need a different version, see this guide . This tool installs Node.js 22 by default. If you need a different version, see this guide .","title":"Create virtualhost"},{"location":"v1/virtualhosts/create-virtualhost/#create-virtualhosts","text":"Move inside the directory development/wsl : cd ~/development/wsl/ Using your preferred text editor, open config.yml and, under the virtualhosts key, enter the virtualhosts that you want to create, each on its own line. Already existing virtualhosts will be skipped, their contents will not be lost, no need to comment or remove them. Save and close the file. Create the specified virtualhosts: ansible-playbook -i hosts create-virtualhost.yml --ask-become-pass This process will ask for your password (set during the installation process) and then iterate over the list of configured virtualhosts and will output a short summary with the results. Your virtualhost should be accessible and ready to use. You will install your project under the html directory of your project, for example: /var/www/example.localhost/html . The virtualhost's document root is set to the public directory of the above location, for example /var/www/example.localhost/html/public . If you want to have the DocumentRoot directly in html folder, you need to modify the file /etc/httpd/sites-available/example.localhost .","title":"Create virtualhosts"},{"location":"v1/virtualhosts/create-virtualhost/#good-to-know","text":"In order to run your installed projects, you need to start AlmaLinux 9 first. If you work with virtualhosts, your projects are created under /var/www/ . You can still run PHP scripts under the default Apache project directory, located at /var/www/html/ . If you encounter write permission issues, see this guide . This tool installs PHP 8.3 by default. If you need a different version, see this guide . This tool installs Node.js 22 by default. If you need a different version, see this guide .","title":"Good to know"},{"location":"v1/virtualhosts/overview/","text":"Overview Virtualhosts allow developers to host multiple applications on their local system. Using this tool, you configure a virtualhost for each of your applications, and it will create them so that you can start working with them. Example : api.dotkernel.localhost : this could be the endpoint where you host your website's API frontend.dotkernel.localhost : this could be domain you host your website's frontend that will consume the API In the above example, the URLs are built like this: the subdomain is the identifier of your application ( api / frontend ) the domain is the identifier of your project ( dotkernel ) the TLD sends the requests to localhost where Apache will route them to their real location By using the pattern *.localhost for any new virtualhost, you do not need to modify the hosts file in Windows, because these are routed by default.","title":"Overview"},{"location":"v1/virtualhosts/overview/#overview","text":"Virtualhosts allow developers to host multiple applications on their local system. Using this tool, you configure a virtualhost for each of your applications, and it will create them so that you can start working with them. Example : api.dotkernel.localhost : this could be the endpoint where you host your website's API frontend.dotkernel.localhost : this could be domain you host your website's frontend that will consume the API In the above example, the URLs are built like this: the subdomain is the identifier of your application ( api / frontend ) the domain is the identifier of your project ( dotkernel ) the TLD sends the requests to localhost where Apache will route them to their real location By using the pattern *.localhost for any new virtualhost, you do not need to modify the hosts file in Windows, because these are routed by default.","title":"Overview"}]}