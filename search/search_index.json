{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WSL2 development environment This is a collection of Ansible scripts helping with the creation and maintenance of your WSL2 development environment. If you're not already using it, we recommend you to install Windows Terminal . It is a modern tool that incorporates the power of multiple already known command-line applications like Windows PowerShell , Linux shell , and more... Check if WLS2 is already available Open Windows Terminal and execute the following command: wsl -v The output should look similar to this: WSL version: 2.2.4.0 Kernel version: 5.15.153.1-2 WSLg version: 1.0.61 MSRDC version: 1.2.5326 Direct3D version: 1.611.1-81528511 DXCore version: 10.0.26091.1-240325-1447.ge-release Windows version: 10.0.22631.3737 If the output starts with WSL version: 2.x.x.x , you are ready to use WSL2 and can proceed to install AlmaLinux10 . Install WSL2 Before proceeding with the installation, please consult Microsoft's documentation regarding the minimum requirements for running WSL2. Once you identified that your machine can run WSL2, open the Run prompt by pressing Win + r , type OptionalFeatures in the dialog and press Enter . This will open a window where you can turn Windows features on/off. Make sure that the below features are activated (checked): Hyper-V (including its sub-features) Virtual Machine Platform Windows Subsystem for Linux If any of the above features are missing, then first you need to install them manually using this guide and then continue with the below steps. Click Ok and restart your computer. Open Microsoft Store, search for Windows Subsystem for Linux and install it. Make sure that version 2 of WSL is set as default by executing the below command in Windows Terminal: wsl --set-default-version 2 To test, run again the following command: wsl -v This time the output should display WSL version: 2.x.x.x , which means that your system is ready for using WSL2 and you can proceed to install AlmaLinux10 .","title":"Home"},{"location":"#wsl2-development-environment","text":"This is a collection of Ansible scripts helping with the creation and maintenance of your WSL2 development environment. If you're not already using it, we recommend you to install Windows Terminal . It is a modern tool that incorporates the power of multiple already known command-line applications like Windows PowerShell , Linux shell , and more...","title":"WSL2 development environment"},{"location":"#check-if-wls2-is-already-available","text":"Open Windows Terminal and execute the following command: wsl -v The output should look similar to this: WSL version: 2.2.4.0 Kernel version: 5.15.153.1-2 WSLg version: 1.0.61 MSRDC version: 1.2.5326 Direct3D version: 1.611.1-81528511 DXCore version: 10.0.26091.1-240325-1447.ge-release Windows version: 10.0.22631.3737 If the output starts with WSL version: 2.x.x.x , you are ready to use WSL2 and can proceed to install AlmaLinux10 .","title":"Check if WLS2 is already available"},{"location":"#install-wsl2","text":"Before proceeding with the installation, please consult Microsoft's documentation regarding the minimum requirements for running WSL2. Once you identified that your machine can run WSL2, open the Run prompt by pressing Win + r , type OptionalFeatures in the dialog and press Enter . This will open a window where you can turn Windows features on/off. Make sure that the below features are activated (checked): Hyper-V (including its sub-features) Virtual Machine Platform Windows Subsystem for Linux If any of the above features are missing, then first you need to install them manually using this guide and then continue with the below steps. Click Ok and restart your computer. Open Microsoft Store, search for Windows Subsystem for Linux and install it. Make sure that version 2 of WSL is set as default by executing the below command in Windows Terminal: wsl --set-default-version 2 To test, run again the following command: wsl -v This time the output should display WSL version: 2.x.x.x , which means that your system is ready for using WSL2 and you can proceed to install AlmaLinux10 .","title":"Install WSL2"},{"location":"v1/faq/","text":"Frequently asked questions How do I switch to a different version of PHP? Execute the following command: sudo dnf module switch-to php:remi-{major}.{minor} -y where {major}.{minor} is one of the supported PHP versions: 8.4 , 8.3 , 8.2 and 8.1 . Additionally, our setup includes predefined aliases for executing the above command. The aliases are the following: php81 : switch to PHP 8.1 php82 : switch to PHP 8.2 php83 : switch to PHP 8.3 php84 : switch to PHP 8.4 After switching to a different PHP version, test with the following command: php -v Depending on the selected PHP version, the output should look similar to the below: PHP 8.3.8 (cli) (built: Jun 4 2024 14:53:17) (NTS gcc x86_64) Copyright (c) The PHP Group Zend Engine v4.3.8, Copyright (c) Zend Technologies How do I switch to a different version of Node.js? Execute the following commands: sudo dnf remove nodejs -y curl -fsSL https://rpm.nodesource.com/setup_{major}.x | sudo bash - sudo dnf install nodejs -y where {major} is the Node.js version you want to switch to. Additionally, our setup includes predefined aliases for the above commands. The aliases are the following: node22 : switch to Node.js 22 node20 : switch to Node.js 20 node18 : switch to Node.js 18 After switching to a different Node.js version, test with the following command: node -v How do I fix common permission issues? If running your project, you encounter permission issues, follow the below steps. Error PHP Fatal error: Uncaught InvalidArgumentException: The directory \" &lt;path-to-project&gt; /data\" is not writable... PHP Fatal error: Uncaught InvalidArgumentException: The directory \" &lt;path-to-project&gt; /data/cache\" is not writable... PHP Fatal error: Uncaught InvalidArgumentException: The directory \" &lt;path-to-project&gt; /data/cache/doctrine\" is not writable... Solution chmod -R 777 data Error PHP Fatal error: Uncaught InvalidArgumentException: The directory \" &lt;path-to-project&gt; /public/uploads\" is not writable... Solution chmod -R 777 public/uploads Error PHP Fatal error: Uncaught ErrorException: fopen( &lt;path-to-project&gt; /log/error-log-yyyy-mm-dd.log): Failed to open stream: Permission denied... Solution chmod -R 777 log Where are the error log files? From time to time, you are encountering various errors which are not displayed. Or you can get errors 500 in a browser. To find the error messages, you need to read the error log files. Apache log files /var/log/httpd/error_log PHP-FPM log files /var/log/php-fpm/error.log /var/log/php-fpm/www-error.log How do I update Composer? Before updating, check your current Composer version by executing: composer --version The output should be similar to: Composer version 2.8.5 2025-01-21 15:23:40 PHP version 8.3.20 (/usr/bin/php) Run the \"diagnose\" command to get more detailed diagnostics output. Update Composer using its own self-update command: sudo /usr/local/bin/composer self-update The output should be similar to: Upgrading to version 2.8.8 (stable channel). Use composer self-update --rollback to return to version 2.8.5 After updating, check again your Composer version by executing: composer --version The output should be similar to: Composer version 2.8.8 2025-04-04 16:56:46 PHP version 8.3.20 (/usr/bin/php) Run the \"diagnose\" command to get more detailed diagnostics output. How do I update phpMyAdmin? Being installed as a system package, it can be updated using the command which updates the rest of the system packages: sudo dnf upgrade -y How do I create command aliases? From either your terminal or file explorer, navigate to your home directory ( /home/&lt;your-username&gt;/ ). Using your preferred text editor, open the file: .bash_profile (if it does not exist, creat it first). Move to the end of the file and enter on a new line: alias command_alias=\"command to execute\" where: command_alias is the name by which you want to call your original command command to execute : the original command to be executed on alias call Example alias list_files=\"ls -Al\" will create an alias called list_files that will run the command ls -Al . Then, you can execute your custom alias in a terminal just as a regular command: list_files","title":"FAQ"},{"location":"v1/faq/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"v1/faq/#how-do-i-switch-to-a-different-version-of-php","text":"Execute the following command: sudo dnf module switch-to php:remi-{major}.{minor} -y where {major}.{minor} is one of the supported PHP versions: 8.4 , 8.3 , 8.2 and 8.1 . Additionally, our setup includes predefined aliases for executing the above command. The aliases are the following: php81 : switch to PHP 8.1 php82 : switch to PHP 8.2 php83 : switch to PHP 8.3 php84 : switch to PHP 8.4 After switching to a different PHP version, test with the following command: php -v Depending on the selected PHP version, the output should look similar to the below: PHP 8.3.8 (cli) (built: Jun 4 2024 14:53:17) (NTS gcc x86_64) Copyright (c) The PHP Group Zend Engine v4.3.8, Copyright (c) Zend Technologies","title":"How do I switch to a different version of PHP?"},{"location":"v1/faq/#how-do-i-switch-to-a-different-version-of-nodejs","text":"Execute the following commands: sudo dnf remove nodejs -y curl -fsSL https://rpm.nodesource.com/setup_{major}.x | sudo bash - sudo dnf install nodejs -y where {major} is the Node.js version you want to switch to. Additionally, our setup includes predefined aliases for the above commands. The aliases are the following: node22 : switch to Node.js 22 node20 : switch to Node.js 20 node18 : switch to Node.js 18 After switching to a different Node.js version, test with the following command: node -v","title":"How do I switch to a different version of Node.js?"},{"location":"v1/faq/#how-do-i-fix-common-permission-issues","text":"If running your project, you encounter permission issues, follow the below steps.","title":"How do I fix common permission issues?"},{"location":"v1/faq/#where-are-the-error-log-files","text":"From time to time, you are encountering various errors which are not displayed. Or you can get errors 500 in a browser. To find the error messages, you need to read the error log files.","title":"Where are the error log files?"},{"location":"v1/faq/#how-do-i-update-composer","text":"Before updating, check your current Composer version by executing: composer --version The output should be similar to: Composer version 2.8.5 2025-01-21 15:23:40 PHP version 8.3.20 (/usr/bin/php) Run the \"diagnose\" command to get more detailed diagnostics output. Update Composer using its own self-update command: sudo /usr/local/bin/composer self-update The output should be similar to: Upgrading to version 2.8.8 (stable channel). Use composer self-update --rollback to return to version 2.8.5 After updating, check again your Composer version by executing: composer --version The output should be similar to: Composer version 2.8.8 2025-04-04 16:56:46 PHP version 8.3.20 (/usr/bin/php) Run the \"diagnose\" command to get more detailed diagnostics output.","title":"How do I update Composer?"},{"location":"v1/faq/#how-do-i-update-phpmyadmin","text":"Being installed as a system package, it can be updated using the command which updates the rest of the system packages: sudo dnf upgrade -y","title":"How do I update phpMyAdmin?"},{"location":"v1/faq/#how-do-i-create-command-aliases","text":"From either your terminal or file explorer, navigate to your home directory ( /home/&lt;your-username&gt;/ ). Using your preferred text editor, open the file: .bash_profile (if it does not exist, creat it first). Move to the end of the file and enter on a new line: alias command_alias=\"command to execute\" where: command_alias is the name by which you want to call your original command command to execute : the original command to be executed on alias call","title":"How do I create command aliases?"},{"location":"v1/introduction/","text":"Introduction dotkernel/development is a tool that helps you prepare your development environment with the following components: WSL2 : Windows Subsystem for Linux AlmaLinux9 : free and open source Linux distribution PHP : general-purpose scripting language geared towards web development Apache : free and open-source cross-platform web server software MariaDB : community-developed, commercially supported fork of the MySQL relational database management system Git : distributed version control system Composer : application-level dependency manager for the PHP Node.js : JavaScript runtime environment PhpMyAdmin : open source administration tool for MySQL and MariaDB","title":"Introduction"},{"location":"v1/introduction/#introduction","text":"dotkernel/development is a tool that helps you prepare your development environment with the following components: WSL2 : Windows Subsystem for Linux AlmaLinux9 : free and open source Linux distribution PHP : general-purpose scripting language geared towards web development Apache : free and open-source cross-platform web server software MariaDB : community-developed, commercially supported fork of the MySQL relational database management system Git : distributed version control system Composer : application-level dependency manager for the PHP Node.js : JavaScript runtime environment PhpMyAdmin : open source administration tool for MySQL and MariaDB","title":"Introduction"},{"location":"v1/setup/installation/","text":"Install AlmaLinux9 Before proceeding with the installation, we need to make sure that no other WSL2 distribution (aka: distro ) is running. This is important because this installation will fail if required ports are already in use by another distro. Open Windows Terminal . Stop other WSL2 distros List all installed distros: wsl -l -v If there is no other distro installed, you will see the below output (an empty list): NAME STATE VERSION In this case, you can jump to the installation section. If you have other distros installed, the output could look similar to the below: NAME STATE VERSION * AlmaLinux-9 Stopped 2 * AlmaLinux-10 Running 2 Make sure that the STATE column reads Stopped for all distros. If any of them reads Running , you must stop if first by executing wsl -t &lt;distro-name&gt; , for example: wsl -t AlmaLinux-10 . Once you have stopped all distros, you can continue to the installation section. Install AlmaLinux9 List the available Linux distros by executing: wsl --list --online Depending on the list of distros available at the moment you run the command, the output should look similar to the below: The following is a list of valid distributions that can be installed. Install using 'wsl.exe --install &lt;Distro&gt;'. NAME FRIENDLY NAME AlmaLinux-8 AlmaLinux OS 8 AlmaLinux-9 AlmaLinux OS 9 AlmaLinux-Kitten-10 AlmaLinux OS Kitten 10 AlmaLinux-10 AlmaLinux OS 10 Debian Debian GNU/Linux FedoraLinux-42 Fedora Linux 42 SUSE-Linux-Enterprise-15-SP5 SUSE Linux Enterprise 15 SP5 SUSE-Linux-Enterprise-15-SP6 SUSE Linux Enterprise 15 SP6 Ubuntu Ubuntu Ubuntu-24.04 Ubuntu 24.04 LTS archlinux Arch Linux kali-linux Kali Linux Rolling openSUSE-Tumbleweed openSUSE Tumbleweed openSUSE-Leap-15.6 openSUSE Leap 15.6 Ubuntu-18.04 Ubuntu 18.04 LTS Ubuntu-20.04 Ubuntu 20.04 LTS Ubuntu-22.04 Ubuntu 22.04 LTS OracleLinux_7_9 Oracle Linux 7.9 OracleLinux_8_7 Oracle Linux 8.7 OracleLinux_9_1 Oracle Linux 9.1 Note the two columns: NAME and FRIENDLY NAME . To install a specific distro, use the value from the NAME column, in this case: AlmaLinux-9 . Install the AlmaLinux9 distro by executing the below command: wsl --install -d AlmaLinux-9 You should see the download progress—once finished, the output should look like this: Downloading: AlmaLinux OS 9 Installing: AlmaLinux OS 9 Distribution successfully installed. It can be launched via 'wsl.exe -d AlmaLinux-9' Launching AlmaLinux-9... Please create a default UNIX user account. The username does not need to match your Windows username. For more information visit: https://aka.ms/wslusers Enter new UNIX username: As per the last line, the installation process now prompts you to enter a username. This is the username you will use inside AlmaLinux9, and it can be any alphanumeric string (for example dotkernel ): Next, you are prompted to change the password associated with your chosen username (you will not see what you are typing, that's a security measure in Linux regarding passwords): Enter new UNIX username: dotkernel. Changing password for user dotkernel. New password: Depending on the strength of your password, you might get a BAD PASSWORD: &lt;some-reason&gt; message (if you want to choose a different password, hit Enter and you are taken back to the previous step—else, continue with retyping your password): Next, you are asked to retype your password: Retype new password: Finally, you should see the following message: passwd: all authentication tokens updated successfully. [&lt;your-almalinux9-username&gt;@&lt;your-device-name&gt; &lt;your-windows-username&gt;]$","title":"Installation"},{"location":"v1/setup/installation/#install-almalinux9","text":"Before proceeding with the installation, we need to make sure that no other WSL2 distribution (aka: distro ) is running. This is important because this installation will fail if required ports are already in use by another distro. Open Windows Terminal .","title":"Install AlmaLinux9"},{"location":"v1/setup/installation/#stop-other-wsl2-distros","text":"List all installed distros: wsl -l -v If there is no other distro installed, you will see the below output (an empty list): NAME STATE VERSION In this case, you can jump to the installation section. If you have other distros installed, the output could look similar to the below: NAME STATE VERSION * AlmaLinux-9 Stopped 2 * AlmaLinux-10 Running 2 Make sure that the STATE column reads Stopped for all distros. If any of them reads Running , you must stop if first by executing wsl -t &lt;distro-name&gt; , for example: wsl -t AlmaLinux-10 . Once you have stopped all distros, you can continue to the installation section.","title":"Stop other WSL2 distros"},{"location":"v1/setup/installation/#install-almalinux9_1","text":"List the available Linux distros by executing: wsl --list --online Depending on the list of distros available at the moment you run the command, the output should look similar to the below: The following is a list of valid distributions that can be installed. Install using 'wsl.exe --install &lt;Distro&gt;'. NAME FRIENDLY NAME AlmaLinux-8 AlmaLinux OS 8 AlmaLinux-9 AlmaLinux OS 9 AlmaLinux-Kitten-10 AlmaLinux OS Kitten 10 AlmaLinux-10 AlmaLinux OS 10 Debian Debian GNU/Linux FedoraLinux-42 Fedora Linux 42 SUSE-Linux-Enterprise-15-SP5 SUSE Linux Enterprise 15 SP5 SUSE-Linux-Enterprise-15-SP6 SUSE Linux Enterprise 15 SP6 Ubuntu Ubuntu Ubuntu-24.04 Ubuntu 24.04 LTS archlinux Arch Linux kali-linux Kali Linux Rolling openSUSE-Tumbleweed openSUSE Tumbleweed openSUSE-Leap-15.6 openSUSE Leap 15.6 Ubuntu-18.04 Ubuntu 18.04 LTS Ubuntu-20.04 Ubuntu 20.04 LTS Ubuntu-22.04 Ubuntu 22.04 LTS OracleLinux_7_9 Oracle Linux 7.9 OracleLinux_8_7 Oracle Linux 8.7 OracleLinux_9_1 Oracle Linux 9.1 Note the two columns: NAME and FRIENDLY NAME . To install a specific distro, use the value from the NAME column, in this case: AlmaLinux-9 . Install the AlmaLinux9 distro by executing the below command: wsl --install -d AlmaLinux-9 You should see the download progress—once finished, the output should look like this: Downloading: AlmaLinux OS 9 Installing: AlmaLinux OS 9 Distribution successfully installed. It can be launched via 'wsl.exe -d AlmaLinux-9' Launching AlmaLinux-9... Please create a default UNIX user account. The username does not need to match your Windows username. For more information visit: https://aka.ms/wslusers Enter new UNIX username: As per the last line, the installation process now prompts you to enter a username. This is the username you will use inside AlmaLinux9, and it can be any alphanumeric string (for example dotkernel ): Next, you are prompted to change the password associated with your chosen username (you will not see what you are typing, that's a security measure in Linux regarding passwords): Enter new UNIX username: dotkernel. Changing password for user dotkernel. New password: Depending on the strength of your password, you might get a BAD PASSWORD: &lt;some-reason&gt; message (if you want to choose a different password, hit Enter and you are taken back to the previous step—else, continue with retyping your password): Next, you are asked to retype your password: Retype new password: Finally, you should see the following message: passwd: all authentication tokens updated successfully. [&lt;your-almalinux9-username&gt;@&lt;your-device-name&gt; &lt;your-windows-username&gt;]$","title":"Install AlmaLinux9"},{"location":"v1/setup/setup-packages/","text":"Setup AlmaLinux9 Install system packages: sudo dnf install epel-release dnf-utils https://rpms.remirepo.net/enterprise/remi-release-9.rpm -y You should see the below message, shown the first time you execute a command which requires elevated permissions (hence the sudo modifier at the beginning of the command). We trust you have received the usual lecture from the local System Administrator. It usually boils down to these three things: #1) Respect the privacy of others. #2) Think before you type. #3) With great power comes great responsibility. [sudo] password for dotkernel: Input your AlmaLinux9 password and hit Enter . Update/Upgrade system packages: sudo dnf upgrade -y Now, install the latest version of Ansible : sudo dnf install ansible -y Move inside your home directory (it is /home/ followed by your AlmaLinux9 username, for example: /home/dotkernel ): cd ~ Clone the almalinux9 branch of the dotkernel/development repository: git clone --branch almalinux9 --single-branch https://github.com/dotkernel/development.git Move inside the directory development/wsl : cd development/wsl/ Duplicate config.yml.dist as config.yml : cp config.yml.dist config.yml Using your preferred text editor, open config.yml and fill in the empty fields. Save and close the file. Install components by running the below Ansible command: ansible-playbook -i hosts install.yml --ask-become-pass The installation process will ask for your AlmaLinux9 password, then iterate over each task in the playbook and output a short summary with the results. Once finished, check if everything works by opening in your browser: http://localhost/ : Apache's default home page http://localhost/info.php : PHP info page http://localhost/phpmyadmin/ : PhpMyAdmin (login with root + the root password you configured in config.yml under mariadb -&gt; root_password ) The installation is complete, your AlmaLinux9 development environment is ready to use. Restart your Windows Terminal to find a new option in the tab selector, called AlmaLinux-9 - clicking it will open a new tab connected to AlmaLinux9 . Running AlmaLinux9 Open Windows Terminal . Start AlmaLinux9 by executing: wsl -d AlmaLinux9 OR Locate the app selector dropdown in Windows Terminal 's title bar and click AlmaLinux-9 . This will open a new tab connected to AlmaLinux9. Note To run your applications using WSL2, you always need to be connected to your AlmaLinux9 distribution. For this, all you need to do is to keep open an instance of Windows Terminal that is connected to it.","title":"Setup Packages"},{"location":"v1/setup/setup-packages/#setup-almalinux9","text":"Install system packages: sudo dnf install epel-release dnf-utils https://rpms.remirepo.net/enterprise/remi-release-9.rpm -y You should see the below message, shown the first time you execute a command which requires elevated permissions (hence the sudo modifier at the beginning of the command). We trust you have received the usual lecture from the local System Administrator. It usually boils down to these three things: #1) Respect the privacy of others. #2) Think before you type. #3) With great power comes great responsibility. [sudo] password for dotkernel: Input your AlmaLinux9 password and hit Enter . Update/Upgrade system packages: sudo dnf upgrade -y Now, install the latest version of Ansible : sudo dnf install ansible -y Move inside your home directory (it is /home/ followed by your AlmaLinux9 username, for example: /home/dotkernel ): cd ~ Clone the almalinux9 branch of the dotkernel/development repository: git clone --branch almalinux9 --single-branch https://github.com/dotkernel/development.git Move inside the directory development/wsl : cd development/wsl/ Duplicate config.yml.dist as config.yml : cp config.yml.dist config.yml Using your preferred text editor, open config.yml and fill in the empty fields. Save and close the file. Install components by running the below Ansible command: ansible-playbook -i hosts install.yml --ask-become-pass The installation process will ask for your AlmaLinux9 password, then iterate over each task in the playbook and output a short summary with the results. Once finished, check if everything works by opening in your browser: http://localhost/ : Apache's default home page http://localhost/info.php : PHP info page http://localhost/phpmyadmin/ : PhpMyAdmin (login with root + the root password you configured in config.yml under mariadb -&gt; root_password ) The installation is complete, your AlmaLinux9 development environment is ready to use. Restart your Windows Terminal to find a new option in the tab selector, called AlmaLinux-9 - clicking it will open a new tab connected to AlmaLinux9 .","title":"Setup AlmaLinux9"},{"location":"v1/setup/setup-packages/#running-almalinux9","text":"Open Windows Terminal . Start AlmaLinux9 by executing: wsl -d AlmaLinux9 OR Locate the app selector dropdown in Windows Terminal 's title bar and click AlmaLinux-9 . This will open a new tab connected to AlmaLinux9.","title":"Running AlmaLinux9"},{"location":"v1/setup/system-requirements/","text":"System requirements If you're not already using it, we recommend you to install Windows Terminal . It is a modern tool that incorporates the power of multiple already known command-line applications like Windows PowerShell , Linux shell , and more... Check if WLS2 is already available Open Windows Terminal and execute the following command: wsl -v The output should look similar to this: WSL version: 2.2.4.0 Kernel version: 5.15.153.1-2 WSLg version: 1.0.61 MSRDC version: 1.2.5326 Direct3D version: 1.611.1-81528511 DXCore version: 10.0.26091.1-240325-1447.ge-release Windows version: 10.0.22631.3737 If the output starts with WSL version: 2.x.x.x , you are ready to use WSL2 and can proceed to install AlmaLinux9 . Install WSL2 Before proceeding with the installation, please consult Microsoft's documentation regarding the minimum requirements for running WSL2. Once you identified that your machine can run WSL2, open the Run prompt by pressing Win + r , type OptionalFeatures in the dialog and press Enter . This will open a window where you can turn Windows features on/off. Make sure that the below features are activated (checked): Hyper-V (including its sub-features) Virtual Machine Platform Windows Subsystem for Linux If any of the above features are missing, then first you need to install them manually using this guide and then continue with the below steps. Click Ok and restart your computer. Open Microsoft Store, search for Windows Subsystem for Linux and install it. Make sure that version 2 of WSL is set as default by executing the below command in Windows Terminal: wsl --set-default-version 2 To test, run again the following command: wsl -v This time the output should display WSL version: 2.x.x.x , which means that your system is ready for using WSL2 and you can proceed to install AlmaLinux9 .","title":"System Requirements"},{"location":"v1/setup/system-requirements/#system-requirements","text":"If you're not already using it, we recommend you to install Windows Terminal . It is a modern tool that incorporates the power of multiple already known command-line applications like Windows PowerShell , Linux shell , and more...","title":"System requirements"},{"location":"v1/setup/system-requirements/#check-if-wls2-is-already-available","text":"Open Windows Terminal and execute the following command: wsl -v The output should look similar to this: WSL version: 2.2.4.0 Kernel version: 5.15.153.1-2 WSLg version: 1.0.61 MSRDC version: 1.2.5326 Direct3D version: 1.611.1-81528511 DXCore version: 10.0.26091.1-240325-1447.ge-release Windows version: 10.0.22631.3737 If the output starts with WSL version: 2.x.x.x , you are ready to use WSL2 and can proceed to install AlmaLinux9 .","title":"Check if WLS2 is already available"},{"location":"v1/setup/system-requirements/#install-wsl2","text":"Before proceeding with the installation, please consult Microsoft's documentation regarding the minimum requirements for running WSL2. Once you identified that your machine can run WSL2, open the Run prompt by pressing Win + r , type OptionalFeatures in the dialog and press Enter . This will open a window where you can turn Windows features on/off. Make sure that the below features are activated (checked): Hyper-V (including its sub-features) Virtual Machine Platform Windows Subsystem for Linux If any of the above features are missing, then first you need to install them manually using this guide and then continue with the below steps. Click Ok and restart your computer. Open Microsoft Store, search for Windows Subsystem for Linux and install it. Make sure that version 2 of WSL is set as default by executing the below command in Windows Terminal: wsl --set-default-version 2 To test, run again the following command: wsl -v This time the output should display WSL version: 2.x.x.x , which means that your system is ready for using WSL2 and you can proceed to install AlmaLinux9 .","title":"Install WSL2"},{"location":"v1/virtualhosts/create-virtualhost/","text":"Create virtualhosts By using the *.localhost pattern for any new virtualhost, you do not need to modify the hosts file in Windows, because these are routed by default. Move inside the directory development/wsl : cd ~/development/wsl/ If you don't already have a config.yml file, duplicate config.yml.dist as config.yml . Using your preferred text editor, open config.yml and, under the virtualhosts key, enter the virtualhosts that you want to create, each on its own line. Already existing virtualhosts will be skipped, their contents will not be lost, no need to comment or remove them. Save and close the file. Create the specified virtualhosts: ansible-playbook -i hosts create-virtualhost.yml --ask-become-pass This process will ask for your AlmaLinux10 password, iterate over the list of configured virtualhosts and output a short summary with the results. Your virtualhost should be accessible and ready to use. You will install your project under the html directory of your project, for example /var/www/example.localhost/html . The virtualhost's document root is set to the public directory of the above location, for example /var/www/example.localhost/html/public . If you want to have the DocumentRoot directly in html folder, you need to modify the file /etc/httpd/sites-available/example.localhost . Good to know To run your installed projects, you need to start AlmaLinux9 first. If you work with virtualhosts, your projects are created under /var/www/ . You can still run PHP scripts under the default Apache project directory, located at /var/www/html/ . If you encounter write permission issues, see this guide . We install PHP 8.3 by default—if you need a different version, see this guide . We install Node.js 22 by default—if you need a different version, see this guide .","title":"Create virtualhost"},{"location":"v1/virtualhosts/create-virtualhost/#create-virtualhosts","text":"By using the *.localhost pattern for any new virtualhost, you do not need to modify the hosts file in Windows, because these are routed by default. Move inside the directory development/wsl : cd ~/development/wsl/ If you don't already have a config.yml file, duplicate config.yml.dist as config.yml . Using your preferred text editor, open config.yml and, under the virtualhosts key, enter the virtualhosts that you want to create, each on its own line. Already existing virtualhosts will be skipped, their contents will not be lost, no need to comment or remove them. Save and close the file. Create the specified virtualhosts: ansible-playbook -i hosts create-virtualhost.yml --ask-become-pass This process will ask for your AlmaLinux10 password, iterate over the list of configured virtualhosts and output a short summary with the results. Your virtualhost should be accessible and ready to use. You will install your project under the html directory of your project, for example /var/www/example.localhost/html . The virtualhost's document root is set to the public directory of the above location, for example /var/www/example.localhost/html/public . If you want to have the DocumentRoot directly in html folder, you need to modify the file /etc/httpd/sites-available/example.localhost .","title":"Create virtualhosts"},{"location":"v1/virtualhosts/create-virtualhost/#good-to-know","text":"To run your installed projects, you need to start AlmaLinux9 first. If you work with virtualhosts, your projects are created under /var/www/ . You can still run PHP scripts under the default Apache project directory, located at /var/www/html/ . If you encounter write permission issues, see this guide . We install PHP 8.3 by default—if you need a different version, see this guide . We install Node.js 22 by default—if you need a different version, see this guide .","title":"Good to know"},{"location":"v1/virtualhosts/overview/","text":"Overview Virtualhosts allow developers to host multiple applications on their local system. Using this tool, you configure a virtualhost for each of your applications, and it will create them so that you can start working with them. Example : api.dotkernel.localhost : this could be the endpoint where you host your website's API frontend.dotkernel.localhost : this could be subdomain where you host your website's frontend that will consume the API In the above example, the URLs are built like this: the subdomain is the identifier of your application ( api / frontend ) the domain is the identifier of your project ( dotkernel ) the TLD sends the requests to localhost where Apache will route them to their real location By using the pattern *.localhost for any new virtualhost, you do not need to modify the hosts file in Windows, because these are routed by default.","title":"Overview"},{"location":"v1/virtualhosts/overview/#overview","text":"Virtualhosts allow developers to host multiple applications on their local system. Using this tool, you configure a virtualhost for each of your applications, and it will create them so that you can start working with them. Example : api.dotkernel.localhost : this could be the endpoint where you host your website's API frontend.dotkernel.localhost : this could be subdomain where you host your website's frontend that will consume the API In the above example, the URLs are built like this: the subdomain is the identifier of your application ( api / frontend ) the domain is the identifier of your project ( dotkernel ) the TLD sends the requests to localhost where Apache will route them to their real location By using the pattern *.localhost for any new virtualhost, you do not need to modify the hosts file in Windows, because these are routed by default.","title":"Overview"},{"location":"v2/faq/","text":"Frequently asked questions How do I switch to a different version of PHP? Execute the following command: sudo dnf module switch-to php:remi-{major}.{minor} -y where {major}.{minor} is one of the supported PHP versions: 8.4 , 8.3 , 8.2 and 8.1 . Additionally, our setup includes predefined aliases for executing the above command. The aliases are the following: php81 : switch to PHP 8.1 php82 : switch to PHP 8.2 php83 : switch to PHP 8.3 php84 : switch to PHP 8.4 After switching to a different PHP version, test with the following command: php -v Depending on the selected PHP version, the output should look similar to the below: PHP 8.3.8 (cli) (built: Jun 4 2024 14:53:17) (NTS gcc x86_64) Copyright (c) The PHP Group Zend Engine v4.3.8, Copyright (c) Zend Technologies How do I switch to a different version of Node.js? Execute the following commands: sudo dnf remove nodejs -y curl -fsSL https://rpm.nodesource.com/setup_{major}.x | sudo bash - sudo dnf install nodejs -y where {major} is the Node.js version you want to switch to. Additionally, our setup includes predefined aliases for the above commands. The aliases are the following: node22 : switch to Node.js 22 node20 : switch to Node.js 20 node18 : switch to Node.js 18 After switching to a different Node.js version, test with the following command: node -v How do I fix common permission issues? If running your project, you encounter permission issues, follow the below steps. Error PHP Fatal error: Uncaught InvalidArgumentException: The directory \" &lt;path-to-project&gt; /data\" is not writable... PHP Fatal error: Uncaught InvalidArgumentException: The directory \" &lt;path-to-project&gt; /data/cache\" is not writable... PHP Fatal error: Uncaught InvalidArgumentException: The directory \" &lt;path-to-project&gt; /data/cache/doctrine\" is not writable... Solution chmod -R 777 data Error PHP Fatal error: Uncaught InvalidArgumentException: The directory \" &lt;path-to-project&gt; /public/uploads\" is not writable... Solution chmod -R 777 public/uploads Error PHP Fatal error: Uncaught ErrorException: fopen( &lt;path-to-project&gt; /log/error-log-yyyy-mm-dd.log): Failed to open stream: Permission denied... Solution chmod -R 777 log Where are the error log files? From time to time, you are encountering various errors which are not displayed. Or you can get errors 500 in a browser. To find the error messages, you need to read the error log files. Apache log files /var/log/httpd/error_log PHP-FPM log files /var/log/php-fpm/error.log /var/log/php-fpm/www-error.log How do I update Composer? Before updating, check your current Composer version by executing: composer --version The output should be similar to: Composer version 2.8.5 2025-01-21 15:23:40 PHP version 8.3.20 (/usr/bin/php) Run the \"diagnose\" command to get more detailed diagnostics output. Update Composer using its own self-update command: sudo /usr/local/bin/composer self-update The output should be similar to: Upgrading to version 2.8.8 (stable channel). Use composer self-update --rollback to return to version 2.8.5 After updating, check again your Composer version by executing: composer --version The output should be similar to: Composer version 2.8.8 2025-04-04 16:56:46 PHP version 8.3.20 (/usr/bin/php) Run the \"diagnose\" command to get more detailed diagnostics output. How do I update phpMyAdmin? Being installed as a system package, it can be updated using the command which updates the rest of the system packages: sudo dnf upgrade -y How do I create command aliases? From either your terminal or file explorer, navigate to your home directory ( /home/&lt;your-username&gt;/ ). Using your preferred text editor, open the file: .bash_profile (if it does not exist, creat it first). Move to the end of the file and enter on a new line: alias command_alias=\"command to execute\" where: command_alias is the name by which you want to call your original command command to execute : the original command to be executed on alias call Example alias list_files=\"ls -Al\" will create an alias called list_files that will run the command ls -Al . Then, you can execute your custom alias in a terminal just as a regular command: list_files","title":"FAQ"},{"location":"v2/faq/#frequently-asked-questions","text":"","title":"Frequently asked questions"},{"location":"v2/faq/#how-do-i-switch-to-a-different-version-of-php","text":"Execute the following command: sudo dnf module switch-to php:remi-{major}.{minor} -y where {major}.{minor} is one of the supported PHP versions: 8.4 , 8.3 , 8.2 and 8.1 . Additionally, our setup includes predefined aliases for executing the above command. The aliases are the following: php81 : switch to PHP 8.1 php82 : switch to PHP 8.2 php83 : switch to PHP 8.3 php84 : switch to PHP 8.4 After switching to a different PHP version, test with the following command: php -v Depending on the selected PHP version, the output should look similar to the below: PHP 8.3.8 (cli) (built: Jun 4 2024 14:53:17) (NTS gcc x86_64) Copyright (c) The PHP Group Zend Engine v4.3.8, Copyright (c) Zend Technologies","title":"How do I switch to a different version of PHP?"},{"location":"v2/faq/#how-do-i-switch-to-a-different-version-of-nodejs","text":"Execute the following commands: sudo dnf remove nodejs -y curl -fsSL https://rpm.nodesource.com/setup_{major}.x | sudo bash - sudo dnf install nodejs -y where {major} is the Node.js version you want to switch to. Additionally, our setup includes predefined aliases for the above commands. The aliases are the following: node22 : switch to Node.js 22 node20 : switch to Node.js 20 node18 : switch to Node.js 18 After switching to a different Node.js version, test with the following command: node -v","title":"How do I switch to a different version of Node.js?"},{"location":"v2/faq/#how-do-i-fix-common-permission-issues","text":"If running your project, you encounter permission issues, follow the below steps.","title":"How do I fix common permission issues?"},{"location":"v2/faq/#where-are-the-error-log-files","text":"From time to time, you are encountering various errors which are not displayed. Or you can get errors 500 in a browser. To find the error messages, you need to read the error log files.","title":"Where are the error log files?"},{"location":"v2/faq/#how-do-i-update-composer","text":"Before updating, check your current Composer version by executing: composer --version The output should be similar to: Composer version 2.8.5 2025-01-21 15:23:40 PHP version 8.3.20 (/usr/bin/php) Run the \"diagnose\" command to get more detailed diagnostics output. Update Composer using its own self-update command: sudo /usr/local/bin/composer self-update The output should be similar to: Upgrading to version 2.8.8 (stable channel). Use composer self-update --rollback to return to version 2.8.5 After updating, check again your Composer version by executing: composer --version The output should be similar to: Composer version 2.8.8 2025-04-04 16:56:46 PHP version 8.3.20 (/usr/bin/php) Run the \"diagnose\" command to get more detailed diagnostics output.","title":"How do I update Composer?"},{"location":"v2/faq/#how-do-i-update-phpmyadmin","text":"Being installed as a system package, it can be updated using the command which updates the rest of the system packages: sudo dnf upgrade -y","title":"How do I update phpMyAdmin?"},{"location":"v2/faq/#how-do-i-create-command-aliases","text":"From either your terminal or file explorer, navigate to your home directory ( /home/&lt;your-username&gt;/ ). Using your preferred text editor, open the file: .bash_profile (if it does not exist, creat it first). Move to the end of the file and enter on a new line: alias command_alias=\"command to execute\" where: command_alias is the name by which you want to call your original command command to execute : the original command to be executed on alias call","title":"How do I create command aliases?"},{"location":"v2/introduction/","text":"Introduction dotkernel/development is a tool that helps you prepare your development environment with the following components: WSL2 : Windows Subsystem for Linux AlmaLinux10 : free and open source Linux distribution PHP : general-purpose scripting language geared towards web development Apache : free and open-source cross-platform web server software MariaDB : community-developed, commercially supported fork of the MySQL relational database management system Git : distributed version control system Composer : application-level dependency manager for the PHP Node.js : JavaScript runtime environment PhpMyAdmin : open source administration tool for MySQL and MariaDB","title":"Introduction"},{"location":"v2/introduction/#introduction","text":"dotkernel/development is a tool that helps you prepare your development environment with the following components: WSL2 : Windows Subsystem for Linux AlmaLinux10 : free and open source Linux distribution PHP : general-purpose scripting language geared towards web development Apache : free and open-source cross-platform web server software MariaDB : community-developed, commercially supported fork of the MySQL relational database management system Git : distributed version control system Composer : application-level dependency manager for the PHP Node.js : JavaScript runtime environment PhpMyAdmin : open source administration tool for MySQL and MariaDB","title":"Introduction"},{"location":"v2/setup/installation/","text":"Install AlmaLinux10 Before proceeding with the installation, we need to make sure that no other WSL2 distribution (aka: distro ) is running. This is important because this installation will fail if required ports are already in use by another distro. Open Windows Terminal . Stop other WSL2 distros List all installed distros: wsl -l -v If there is no other distro installed, you will see the below output (an empty list): NAME STATE VERSION In this case, you can jump to the installation section. If you have other distros installed, the output could look similar to the below: NAME STATE VERSION * AlmaLinux-8 Stopped 2 * AlmaLinux-9 Running 2 Make sure that the STATE column reads Stopped for all distros. If any of them reads Running , you must stop if first by executing wsl -t &lt;distro-name&gt; , for example: wsl -t AlmaLinux-9 . Once you have stopped all distros, you can continue to the installation section. Install AlmaLinux10 List the available Linux distros by executing: wsl --list --online Depending on the list of distros available at the moment you run the command, the output should look similar to the below: The following is a list of valid distributions that can be installed. Install using 'wsl.exe --install &lt;Distro&gt;'. NAME FRIENDLY NAME AlmaLinux-8 AlmaLinux OS 8 AlmaLinux-9 AlmaLinux OS 9 AlmaLinux-Kitten-10 AlmaLinux OS Kitten 10 AlmaLinux-10 AlmaLinux OS 10 Debian Debian GNU/Linux FedoraLinux-42 Fedora Linux 42 SUSE-Linux-Enterprise-15-SP5 SUSE Linux Enterprise 15 SP5 SUSE-Linux-Enterprise-15-SP6 SUSE Linux Enterprise 15 SP6 Ubuntu Ubuntu Ubuntu-24.04 Ubuntu 24.04 LTS archlinux Arch Linux kali-linux Kali Linux Rolling openSUSE-Tumbleweed openSUSE Tumbleweed openSUSE-Leap-15.6 openSUSE Leap 15.6 Ubuntu-18.04 Ubuntu 18.04 LTS Ubuntu-20.04 Ubuntu 20.04 LTS Ubuntu-22.04 Ubuntu 22.04 LTS OracleLinux_7_9 Oracle Linux 7.9 OracleLinux_8_7 Oracle Linux 8.7 OracleLinux_9_1 Oracle Linux 9.1 Note the two columns: NAME and FRIENDLY NAME . To install a specific distro, use the value from the NAME column, in this case: AlmaLinux-10 . Install the AlmaLinux10 distro by executing the below command: wsl --install -d AlmaLinux-10 You should see the download progress—once finished, the output should look like this: Downloading: AlmaLinux OS 10 Installing: AlmaLinux OS 10 Distribution successfully installed. It can be launched via 'wsl.exe -d AlmaLinux-10' Launching AlmaLinux-10... Please create a default UNIX user account. The username does not need to match your Windows username. For more information visit: https://aka.ms/wslusers Enter new UNIX username: As per the last line, the installation process now prompts you to enter a username. This is the username you will use inside AlmaLinux10, and it can be any alphanumeric string (for example dotkernel ): Next, you are prompted to change the password associated with your chosen username (you will not see what you are typing, that's a security measure in Linux regarding passwords): Enter new UNIX username: dotkernel. New password: Depending on the strength of your password, you might get a BAD PASSWORD: &lt;some-reason&gt; message (if you want to choose a different password, hit Enter and you are taken back to the previous step—else, continue with retyping your password): Next, you are asked to retype your password: Retype new password: Finally, you should see the following message: passwd: password updated successfully [&lt;your-almalinux10-username&gt;@&lt;your-device-name&gt; &lt;your-windows-username&gt;]$","title":"Installation"},{"location":"v2/setup/installation/#install-almalinux10","text":"Before proceeding with the installation, we need to make sure that no other WSL2 distribution (aka: distro ) is running. This is important because this installation will fail if required ports are already in use by another distro. Open Windows Terminal .","title":"Install AlmaLinux10"},{"location":"v2/setup/installation/#stop-other-wsl2-distros","text":"List all installed distros: wsl -l -v If there is no other distro installed, you will see the below output (an empty list): NAME STATE VERSION In this case, you can jump to the installation section. If you have other distros installed, the output could look similar to the below: NAME STATE VERSION * AlmaLinux-8 Stopped 2 * AlmaLinux-9 Running 2 Make sure that the STATE column reads Stopped for all distros. If any of them reads Running , you must stop if first by executing wsl -t &lt;distro-name&gt; , for example: wsl -t AlmaLinux-9 . Once you have stopped all distros, you can continue to the installation section.","title":"Stop other WSL2 distros"},{"location":"v2/setup/installation/#install-almalinux10_1","text":"List the available Linux distros by executing: wsl --list --online Depending on the list of distros available at the moment you run the command, the output should look similar to the below: The following is a list of valid distributions that can be installed. Install using 'wsl.exe --install &lt;Distro&gt;'. NAME FRIENDLY NAME AlmaLinux-8 AlmaLinux OS 8 AlmaLinux-9 AlmaLinux OS 9 AlmaLinux-Kitten-10 AlmaLinux OS Kitten 10 AlmaLinux-10 AlmaLinux OS 10 Debian Debian GNU/Linux FedoraLinux-42 Fedora Linux 42 SUSE-Linux-Enterprise-15-SP5 SUSE Linux Enterprise 15 SP5 SUSE-Linux-Enterprise-15-SP6 SUSE Linux Enterprise 15 SP6 Ubuntu Ubuntu Ubuntu-24.04 Ubuntu 24.04 LTS archlinux Arch Linux kali-linux Kali Linux Rolling openSUSE-Tumbleweed openSUSE Tumbleweed openSUSE-Leap-15.6 openSUSE Leap 15.6 Ubuntu-18.04 Ubuntu 18.04 LTS Ubuntu-20.04 Ubuntu 20.04 LTS Ubuntu-22.04 Ubuntu 22.04 LTS OracleLinux_7_9 Oracle Linux 7.9 OracleLinux_8_7 Oracle Linux 8.7 OracleLinux_9_1 Oracle Linux 9.1 Note the two columns: NAME and FRIENDLY NAME . To install a specific distro, use the value from the NAME column, in this case: AlmaLinux-10 . Install the AlmaLinux10 distro by executing the below command: wsl --install -d AlmaLinux-10 You should see the download progress—once finished, the output should look like this: Downloading: AlmaLinux OS 10 Installing: AlmaLinux OS 10 Distribution successfully installed. It can be launched via 'wsl.exe -d AlmaLinux-10' Launching AlmaLinux-10... Please create a default UNIX user account. The username does not need to match your Windows username. For more information visit: https://aka.ms/wslusers Enter new UNIX username: As per the last line, the installation process now prompts you to enter a username. This is the username you will use inside AlmaLinux10, and it can be any alphanumeric string (for example dotkernel ): Next, you are prompted to change the password associated with your chosen username (you will not see what you are typing, that's a security measure in Linux regarding passwords): Enter new UNIX username: dotkernel. New password: Depending on the strength of your password, you might get a BAD PASSWORD: &lt;some-reason&gt; message (if you want to choose a different password, hit Enter and you are taken back to the previous step—else, continue with retyping your password): Next, you are asked to retype your password: Retype new password: Finally, you should see the following message: passwd: password updated successfully [&lt;your-almalinux10-username&gt;@&lt;your-device-name&gt; &lt;your-windows-username&gt;]$","title":"Install AlmaLinux10"},{"location":"v2/setup/setup-packages/","text":"Setup AlmaLinux10 Install system packages: sudo dnf install epel-release dnf-utils https://rpms.remirepo.net/enterprise/remi-release-10.rpm -y You should see the below message, shown the first time you execute a command which requires elevated permissions (hence the sudo modifier at the beginning of the command). We trust you have received the usual lecture from the local System Administrator. It usually boils down to these three things: #1) Respect the privacy of others. #2) Think before you type. #3) With great power comes great responsibility. For security reasons, the password you type will not be visible. [sudo] password for dotkernel: Input your AlmaLinux10 password and hit Enter . Update/Upgrade system packages: sudo dnf upgrade -y Now, install the latest version of Ansible Core and run ansible-galaxy to install collections: sudo dnf install ansible-core -y ansible-galaxy collection install community.general community.mysql Move inside your home directory (it is /home/ followed by your AlmaLinux10 username, for example: /home/dotkernel ): cd ~ Clone the alma-linux-10 branch of the dotkernel/development repository: git clone --branch alma-linux-10 --single-branch https://github.com/dotkernel/development.git Move inside the directory development/wsl : cd development/wsl/ Duplicate config.yml.dist as config.yml : cp config.yml.dist config.yml Using your preferred text editor, open config.yml and fill in the empty fields. Save and close the file. Install components by running the below Ansible command: ansible-playbook -i hosts install.yml --ask-become-pass The installation process will ask for your AlmaLinux10 password, then iterate over each task in the playbook and output a short summary with the results. Once finished, check if everything works by opening in your browser: http://localhost/ : Apache's default home page http://localhost/info.php : PHP info page http://localhost/phpmyadmin/ : PhpMyAdmin (login with root + the root password you configured in config.yml under mariadb -&gt; root_password ) The installation is complete, your AlmaLinux10 development environment is ready to use. Restart your Windows Terminal to find a new option in the tab selector, called AlmaLinux-10 ; clicking it will open a new tab connected to AlmaLinux10 . Running AlmaLinux10 Open Windows Terminal . Start AlmaLinux10 by executing: wsl -d AlmaLinux10 OR Locate the app selector dropdown in Windows Terminal 's title bar and click AlmaLinux-10 . This will open a new tab connected to AlmaLinux10. Note To run your applications using WSL2, you always need to be connected to your AlmaLinux10 distribution. For this, all you need to do is to keep open an instance of Windows Terminal that is connected to it.","title":"Setup Packages"},{"location":"v2/setup/setup-packages/#setup-almalinux10","text":"Install system packages: sudo dnf install epel-release dnf-utils https://rpms.remirepo.net/enterprise/remi-release-10.rpm -y You should see the below message, shown the first time you execute a command which requires elevated permissions (hence the sudo modifier at the beginning of the command). We trust you have received the usual lecture from the local System Administrator. It usually boils down to these three things: #1) Respect the privacy of others. #2) Think before you type. #3) With great power comes great responsibility. For security reasons, the password you type will not be visible. [sudo] password for dotkernel: Input your AlmaLinux10 password and hit Enter . Update/Upgrade system packages: sudo dnf upgrade -y Now, install the latest version of Ansible Core and run ansible-galaxy to install collections: sudo dnf install ansible-core -y ansible-galaxy collection install community.general community.mysql Move inside your home directory (it is /home/ followed by your AlmaLinux10 username, for example: /home/dotkernel ): cd ~ Clone the alma-linux-10 branch of the dotkernel/development repository: git clone --branch alma-linux-10 --single-branch https://github.com/dotkernel/development.git Move inside the directory development/wsl : cd development/wsl/ Duplicate config.yml.dist as config.yml : cp config.yml.dist config.yml Using your preferred text editor, open config.yml and fill in the empty fields. Save and close the file. Install components by running the below Ansible command: ansible-playbook -i hosts install.yml --ask-become-pass The installation process will ask for your AlmaLinux10 password, then iterate over each task in the playbook and output a short summary with the results. Once finished, check if everything works by opening in your browser: http://localhost/ : Apache's default home page http://localhost/info.php : PHP info page http://localhost/phpmyadmin/ : PhpMyAdmin (login with root + the root password you configured in config.yml under mariadb -&gt; root_password ) The installation is complete, your AlmaLinux10 development environment is ready to use. Restart your Windows Terminal to find a new option in the tab selector, called AlmaLinux-10 ; clicking it will open a new tab connected to AlmaLinux10 .","title":"Setup AlmaLinux10"},{"location":"v2/setup/setup-packages/#running-almalinux10","text":"Open Windows Terminal . Start AlmaLinux10 by executing: wsl -d AlmaLinux10 OR Locate the app selector dropdown in Windows Terminal 's title bar and click AlmaLinux-10 . This will open a new tab connected to AlmaLinux10.","title":"Running AlmaLinux10"},{"location":"v2/setup/system-requirements/","text":"System requirements If you're not already using it, we recommend you to install Windows Terminal . It is a modern tool that incorporates the power of multiple already known command-line applications like Windows PowerShell , Linux shell , and more... Check if WLS2 is already available Open Windows Terminal and execute the following command: wsl -v The output should look similar to this: WSL version: 2.2.4.0 Kernel version: 5.15.153.1-2 WSLg version: 1.0.61 MSRDC version: 1.2.5326 Direct3D version: 1.611.1-81528511 DXCore version: 10.0.26091.1-240325-1447.ge-release Windows version: 10.0.22631.3737 If the output starts with WSL version: 2.x.x.x , you are ready to use WSL2 and can proceed to install AlmaLinux10 . Install WSL2 Before proceeding with the installation, please consult Microsoft's documentation regarding the minimum requirements for running WSL2. Once you identified that your machine can run WSL2, open the Run prompt by pressing Win + r , type OptionalFeatures in the dialog and press Enter . This will open a window where you can turn Windows features on/off. Make sure that the below features are activated (checked): Hyper-V (including its sub-features) Virtual Machine Platform Windows Subsystem for Linux If any of the above features are missing, then first you need to install them manually using this guide and then continue with the below steps. Click Ok and restart your computer. Open Microsoft Store, search for Windows Subsystem for Linux and install it. Make sure that version 2 of WSL is set as default by executing the below command in Windows Terminal: wsl --set-default-version 2 To test, run again the following command: wsl -v This time the output should display WSL version: 2.x.x.x , which means that your system is ready for using WSL2 and you can proceed to install AlmaLinux10 .","title":"System Requirements"},{"location":"v2/setup/system-requirements/#system-requirements","text":"If you're not already using it, we recommend you to install Windows Terminal . It is a modern tool that incorporates the power of multiple already known command-line applications like Windows PowerShell , Linux shell , and more...","title":"System requirements"},{"location":"v2/setup/system-requirements/#check-if-wls2-is-already-available","text":"Open Windows Terminal and execute the following command: wsl -v The output should look similar to this: WSL version: 2.2.4.0 Kernel version: 5.15.153.1-2 WSLg version: 1.0.61 MSRDC version: 1.2.5326 Direct3D version: 1.611.1-81528511 DXCore version: 10.0.26091.1-240325-1447.ge-release Windows version: 10.0.22631.3737 If the output starts with WSL version: 2.x.x.x , you are ready to use WSL2 and can proceed to install AlmaLinux10 .","title":"Check if WLS2 is already available"},{"location":"v2/setup/system-requirements/#install-wsl2","text":"Before proceeding with the installation, please consult Microsoft's documentation regarding the minimum requirements for running WSL2. Once you identified that your machine can run WSL2, open the Run prompt by pressing Win + r , type OptionalFeatures in the dialog and press Enter . This will open a window where you can turn Windows features on/off. Make sure that the below features are activated (checked): Hyper-V (including its sub-features) Virtual Machine Platform Windows Subsystem for Linux If any of the above features are missing, then first you need to install them manually using this guide and then continue with the below steps. Click Ok and restart your computer. Open Microsoft Store, search for Windows Subsystem for Linux and install it. Make sure that version 2 of WSL is set as default by executing the below command in Windows Terminal: wsl --set-default-version 2 To test, run again the following command: wsl -v This time the output should display WSL version: 2.x.x.x , which means that your system is ready for using WSL2 and you can proceed to install AlmaLinux10 .","title":"Install WSL2"},{"location":"v2/virtualhosts/create-virtualhost/","text":"Create virtualhosts By using the *.localhost pattern for any new virtualhost, you do not need to modify the hosts file in Windows, because these are routed by default. Move inside the directory development/wsl : cd ~/development/wsl/ If you don't already have a config.yml file, duplicate config.yml.dist as config.yml . Using your preferred text editor, open config.yml and, under the virtualhosts key, enter the virtualhosts that you want to create, each on its own line. Already existing virtualhosts will be skipped, their contents will not be lost, no need to comment or remove them. Save and close the file. Create the specified virtualhosts: ansible-playbook -i hosts create-virtualhost.yml --ask-become-pass This process will ask for your AlmaLinux10 password, iterate over the list of configured virtualhosts and output a short summary with the results. Your virtualhost should be accessible and ready to use. You will install your project under the html directory of your project, for example /var/www/example.localhost/html . The virtualhost's document root is set to the public directory of the above location, for example /var/www/example.localhost/html/public . If you want to have the DocumentRoot directly in html folder, you need to modify the file /etc/httpd/sites-available/example.localhost . Good to know To run your installed projects, you need to start AlmaLinux10 first. If you work with virtualhosts, your projects are created under /var/www/ . You can still run PHP scripts under the default Apache project directory, located at /var/www/html/ . If you encounter write permission issues, see this guide . We install PHP 8.4 by default—if you need a different version, see this guide . We install Node.js 22 by default—if you need a different version, see this guide .","title":"Create virtualhost"},{"location":"v2/virtualhosts/create-virtualhost/#create-virtualhosts","text":"By using the *.localhost pattern for any new virtualhost, you do not need to modify the hosts file in Windows, because these are routed by default. Move inside the directory development/wsl : cd ~/development/wsl/ If you don't already have a config.yml file, duplicate config.yml.dist as config.yml . Using your preferred text editor, open config.yml and, under the virtualhosts key, enter the virtualhosts that you want to create, each on its own line. Already existing virtualhosts will be skipped, their contents will not be lost, no need to comment or remove them. Save and close the file. Create the specified virtualhosts: ansible-playbook -i hosts create-virtualhost.yml --ask-become-pass This process will ask for your AlmaLinux10 password, iterate over the list of configured virtualhosts and output a short summary with the results. Your virtualhost should be accessible and ready to use. You will install your project under the html directory of your project, for example /var/www/example.localhost/html . The virtualhost's document root is set to the public directory of the above location, for example /var/www/example.localhost/html/public . If you want to have the DocumentRoot directly in html folder, you need to modify the file /etc/httpd/sites-available/example.localhost .","title":"Create virtualhosts"},{"location":"v2/virtualhosts/create-virtualhost/#good-to-know","text":"To run your installed projects, you need to start AlmaLinux10 first. If you work with virtualhosts, your projects are created under /var/www/ . You can still run PHP scripts under the default Apache project directory, located at /var/www/html/ . If you encounter write permission issues, see this guide . We install PHP 8.4 by default—if you need a different version, see this guide . We install Node.js 22 by default—if you need a different version, see this guide .","title":"Good to know"},{"location":"v2/virtualhosts/overview/","text":"Overview Virtualhosts allow developers to host multiple applications on their local system. Using this tool, you configure a virtualhost for each of your applications, and it will create them so that you can start working with them. Example : api.dotkernel.localhost : this could be the endpoint where you host your website's API frontend.dotkernel.localhost : this could be subdomain where you host your website's frontend that will consume the API In the above example, the URLs are built like this: the subdomain is the identifier of your application ( api / frontend ) the domain is the identifier of your project ( dotkernel ) the TLD sends the requests to localhost where Apache will route them to their real location By using the pattern *.localhost for any new virtualhost, you do not need to modify the hosts file in Windows, because these are routed by default.","title":"Overview"},{"location":"v2/virtualhosts/overview/#overview","text":"Virtualhosts allow developers to host multiple applications on their local system. Using this tool, you configure a virtualhost for each of your applications, and it will create them so that you can start working with them. Example : api.dotkernel.localhost : this could be the endpoint where you host your website's API frontend.dotkernel.localhost : this could be subdomain where you host your website's frontend that will consume the API In the above example, the URLs are built like this: the subdomain is the identifier of your application ( api / frontend ) the domain is the identifier of your project ( dotkernel ) the TLD sends the requests to localhost where Apache will route them to their real location By using the pattern *.localhost for any new virtualhost, you do not need to modify the hosts file in Windows, because these are routed by default.","title":"Overview"}]}